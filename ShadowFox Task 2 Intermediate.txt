import pandas as pd
bhimport numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

train = pd.read_csv("https://raw.githubusercontent.com/dphi-official/Datasets/master/Loan_Data/loan_train.csv")
test = pd.read_csv("https://raw.githubusercontent.com/dphi-official/Datasets/master/Loan_Data/loan_test.csv")

if "Unnamed: 0" in train.columns:
    train = train.drop(["Unnamed: 0"], axis=1)

X = train.drop(["Loan_ID", "Loan_Status"], axis=1)
y = train["Loan_Status"]

test_ids = test["Loan_ID"]
X_test = test.drop(["Loan_ID"], axis=1)

imputer = SimpleImputer(strategy="most_frequent")
X = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)
X_test = pd.DataFrame(imputer.transform(X_test), columns=X_test.columns)

cat_cols = X.select_dtypes(include="object").columns
encoder = LabelEncoder()

for col in cat_cols:
    X[col] = encoder.fit_transform(X[col])
    X_test[col] = encoder.transform(X_test[col])

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

y_pred = model.predict(X_val)
print("Validation Accuracy:", accuracy_score(y_val, y_pred))

test_predictions = model.predict(X_test)

output = pd.DataFrame({"Loan_ID": test_ids, "Loan_Status_Pred": test_predictions})
print(output.head())
        
